FIRST = {
    "Program": ["break", "continue", "ID", "return", "global", "def", "if", "while", "output", "EPSILON"],
    "Statements": ["break", "continue", "ID", "return", "global", "def", "if", "while", "output", "EPSILON"],
    "Statement": ["break", "continue", "ID", "return", "global", "def", "if", "while", "output"],
    "Simple_stmt": ["break", "continue", "ID", "return", "global", "output"],
    "Compound_stmt": ["def", "if", "while"],
    "Assignment_Call": ["ID"],
    "B": ["=", "[", "("],
    "C": ["ID", "[", "NUM"],
    "List_Rest": [",", "EPSILON"],
    "Return_stmt": ["return"],
    "Return_Value": ["ID", "NUM", "EPSILON"],
    "Global_stmt": ["global"],
    "Function_def": ["def"],
    "Params": ["ID", "EPSILON"],
    "Params_Prime": [",", "EPSILON"],
    "If_stmt": ["if"],
    "Else_block": ["else", "EPSILON"],
    "Iteration_stmt": ["while"],
    "Relational_Expression": ["ID", "NUM"],
    "Relop": ["==", "<"],
    "Expression": ["ID", "NUM"],
    "Expression_Prime": ["+", "-", "EPSILON"],
    "Term": ["ID", "NUM"],
    "Term_Prime": ["*", "EPSILON"],
    "Factor": ["ID", "NUM"],
    "Power": ["(", "[", "**", "EPSILON"],
    "Primary": ["(", "[", "EPSILON"],
    "Arguments": ["ID", "NUM", "EPSILON"],
    "Arguments_Prime": [",", "EPSILON"],
    "Atom": ["ID", "NUM"]
}

FOLLOW = {
    "Program": ["$"],
    "Statements": [";", "else", "$"],
    "Statement": [";"],
    "Simple_stmt": [";"],
    "Compound_stmt": [";"],
    "Assignment_Call": [";"],
    "B": [";"],
    "C": [";"],
    "List_Rest": ["]"],
    "Return_stmt": [";"],
    "Return_Value": [";"],
    "Global_stmt": [";"],
    "Function_def": [";"],
    "Params": [")"],
    "Params_Prime": [")"],
    "If_stmt": [";"],
    "Else_block": [";"],
    "Iteration_stmt": [";"],
    "Relational_Expression": [")", ":"],
    "Relop": ["ID", "NUM"],
    "Expression": [";", "]", ")", ",", ":", "==", "<"],
    "Expression_Prime": [";", "]", ")", ",", ":", "==", "<"],
    "Term": [";", "]", ")", ",", ":", "==", "<", "+", "-"],
    "Term_Prime": [";", "]", ")", ",", ":", "==", "<", "+", "-"],
    "Factor": [";", "]", ")", ",", ":", "==", "<", "+", "-", "*"],
    "Power": [";", "]", ")", ",", ":", "==", "<", "+", "-", "*"],
    "Primary": [";", "]", ")", ",", ":", "==", "<", "+", "-", "*"],
    "Arguments": [")"],
    "Arguments_Prime": [")"],
    "Atom": [";", "[", "]", "(", ")", ",", ":", "==", "<", "+", "-", "*", "**"]
}

NON_TERMINAL = set(FIRST)
TERMINAL = {";", "break", "continue", "ID", "=", "[", "]", "(", ")", ",", "return", "global", "def", ":", "if",
            "else", "while", "==", "<", "+", "-", "*", "**", "NUM", "output"}

GRAMMAR = {
    "Program": ["Statements ##check_main"],
    "Statements": ["Statement ; Statements", "EPSILON"],
    "Statement": ["Compound_stmt", "Simple_stmt"],
    "Simple_stmt": ["Assignment_Call", "Return_stmt", "Global_stmt", "break #break", "continue #continue", "output ( Expression ) #print"],
    "Compound_stmt": ["Function_def #return", "If_stmt", "Iteration_stmt"],
    "Assignment_Call": ["#push_id ID B"],
    "B": ["= C", "[ Expression ] #push_element = C", "( Arguments ) #call_func"],
    "C": ["Expression #assign_value", "#assign_array [ Expression #add_element List_Rest ]"],
    "List_Rest": [", Expression #add_element List_Rest", "EPSILON"],
    "Return_stmt": ["return Return_Value"],
    "Return_Value": ["Expression #return_value", "EPSILON #return"],
    "Global_stmt": ["global ID"],
    "Function_def": ["def ##add_method #update_method ID ( Params ) : Statements"],
    "Params": ["#saw_id ID Params_Prime", "EPSILON"],
    "Params_Prime": [", #saw_id ID Params_Prime", "EPSILON"],
    "If_stmt": ["if Relational_Expression #save : Statements Else_block"],
    "Else_block": ["else #if_save : Statements #else", "EPSILON #if"],
    "Iteration_stmt": ["while #label ( Relational_Expression ) #save_while Statements #while"],
    "Relational_Expression": ["Expression #push_relop Relop Expression #compare"],
    "Relop": ["==", "<"],
    "Expression": ["Term Expression_Prime"],
    "Expression_Prime": ["+ Term Expression_Prime #add", "- Term Expression_Prime #sub", "EPSILON"],
    "Term": ["Factor Term_Prime"],
    "Term_Prime": ["* Factor Term_Prime #mult", "EPSILON"],
    "Factor": ["Atom Power"],
    "Power": ["** Factor #power", "Primary"],
    "Primary": ["[ Expression ] #push_element Primary", "( Arguments ) #call_func #push_returned_value Primary", "EPSILON"],
    "Arguments": ["Expression #add_param Arguments_Prime", "EPSILON"],
    "Arguments_Prime": [", Expression #add_param Arguments_Prime", "EPSILON"],
    "Atom": ["#push_id ID", "#push_num NUM"]
}
